#!/usr/bin/env perl

use 5.020;
use warnings;

use Getopt::Long qw(:config no_ignore_case bundling); # see perldoc.perl.org
use File::Basename;

use constant { TMPDIR      => defined $ENV{TMPDIR}? $ENV{TMPDIR} : "/tmp"
             , BAKADIR     => "/baka"
             , BAKA_SUFFIX => ".baka" };

sub help {
     say "We will get there.";

     exit(0);
}

# change function name
sub extract {
     my $source = $_[0];

     unless (-e $source) {
          say "Could'nt find sorce file. Aborting.";
          exit(1);
     }

     chomp(my $valid_baka = `tar -tf $source 2>/dev/null | wc -l`);

     if (! $valid_baka) { # check if source is a valid tar.gz archive, and if
                          # there are any content in it
          say "File '$valid_baka' is not a valid baka file. Aborting.";
          exit(1);
     }

     unless (-e "${\TMPDIR}${\BAKADIR}") { # baka dir doesn't exist
          `mkdir ${\TMPDIR}${\BAKADIR}`;
     }

     `tar -xpzf $source -C ${\TMPDIR}${\BAKADIR}`;
}

# recieves target path, and head of the tmp path
# returns a list of the newer files in the tmp path
sub get_newer_files {
     my @nf;
}

# creates a new backup (target) file for source dir
sub new_bak_file {
     my ($basename, $path, $suffix) = fileparse($_[0], BAKA_SUFFIX);
     my $target = $_[1];

     say "$path$basename$suffix";
     ## check files
     unless (-e "$path$basename$suffix") {
          say "Could'nt find sorce file. Aborting.";
          exit(1);
     }

     if (-e $target) {
          print "Bak file already exists, overwrite it? [y/N]: ";
          chomp(my $ans = <STDIN>);

          given ($ans) {
               when (/^$|[Nn]/) { say "Leaving."; exit(0)     }
               when (/[Yy]/)    { say "Overwriting..."; break }

               default {
                    say "Unexpected answer. Aborting.";
                    exit(1);
               }
          }
     }
     ## end

     my $CWD = $path;
     `tar -cpzf $target/$basename${\BAKA_SUFFIX} $basename$suffix 2>/dev/null`;
}

sub main {
     my %options;

     # info about the meaning of the arguments can be found at sub help
     GetOptions(\%options,
                'help',
                'c', 'b',
                's=s', 'source=s',
                't=s', 'target=s'
     ) or do {
          say "BAKA! You're using it wrong. See --help for instructions.";
          exit(1);
     };

     &help if (defined $options{'help'});

     if (defined $options{c}) {
          &new_bak_file($options{'s'}, $options{'t'});
     }

     if (defined $options{b}) {
          &extract($options{s});
     }
}

&main if (__FILE__ eq $0);

=begin cmnt
     ## will be used later
     chomp(my $st = (stat('README.md'))[10]);
     my @date = localtime($st);

     say $date[3];
     say $date[4] + 1;
     say $date[5] + 1900;
     ##
=end cmnt
